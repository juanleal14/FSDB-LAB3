DROP INDEX index_on_score_posts;
DROP INDEX index_on_username_lines;
DROP INDEX index_on_barcode_posts;
DROP INDEX index_on_product_posts;


-- -----------------------------------
-- - SCRIPTS DE CREACIÓN E INSERCIÓN -
-- -----------------------------------

-- - TABLES DESTRUCTION  - - - - - - -
-- -----------------------------------

DROP TABLE Client_Lines CASCADE CONSTRAINTS;
DROP TABLE Orders_Clients CASCADE CONSTRAINTS;
DROP TABLE Client_Cards CASCADE CONSTRAINTS;
DROP TABLE Client_Addresses CASCADE CONSTRAINTS;
DROP TABLE Lines_Anonym CASCADE CONSTRAINTS;
DROP TABLE Orders_Anonym CASCADE CONSTRAINTS;
DROP TABLE AnonyPosts  CASCADE CONSTRAINTS;
DROP TABLE Posts  CASCADE CONSTRAINTS;
DROP TABLE Clients CASCADE CONSTRAINTS;
DROP TABLE Replacements CASCADE CONSTRAINTS;
DROP TABLE Supply_lines CASCADE CONSTRAINTS;
DROP TABLE Providers CASCADE CONSTRAINTS;
DROP TABLE References  CASCADE CONSTRAINTS;
DROP TABLE Products CASCADE CONSTRAINTS;
DROP TABLE Origins CASCADE CONSTRAINTS;
DROP TABLE Varietals CASCADE CONSTRAINTS;

DROP CLUSTER cluster_lines;


-- - VALIDATION TABLES - - - - - - - -
-- -----------------------------------
CREATE TABLE Varietals (
  name      VARCHAR2(30),
  CONSTRAINT pk_varietal PRIMARY KEY(name) 
);
CREATE TABLE Origins (
  name      VARCHAR2(30),
  CONSTRAINT pk_origins PRIMARY KEY(name) 
);


-- - TABLES CREATION - - - - - - - - -
-- -----------------------------------

CREATE TABLE Products (
  product      VARCHAR2(50),
  coffea       CHAR(1) NOT NULL,
  varietal     VARCHAR2(30) NOT NULL,
  origin       VARCHAR2(15) NOT NULL,
  roast        CHAR(1) NOT NULL,
  decaf        CHAR(1) NOT NULL,
  CONSTRAINT pk_products PRIMARY KEY(product), 
  CONSTRAINT fk_products_varietals FOREIGN KEY(varietal) REFERENCES Varietals,
  CONSTRAINT fk_products_origins FOREIGN KEY(origin) REFERENCES Origins,
  CONSTRAINT D_coffea CHECK (coffea IN ('A','C','L')), 
  CONSTRAINT D_roast CHECK (roast IN ('N','H','B')), 
  CONSTRAINT D_decaf CHECK (decaf IN ('Y','N')) 
);


CREATE TABLE References (
  barCode      CHAR(15),
  product      VARCHAR2(50) NOT NULL,
  format       CHAR(1) NOT NULL,
  pack_type    VARCHAR2(10) NOT NULL,
  pack_unit    VARCHAR2(10) NOT NULL,
  quantity     NUMBER(6) NOT NULL,
  price        NUMBER(12,2) NOT NULL,
  cur_stock    NUMBER(5) DEFAULT(0) NOT NULL,
  min_stock    NUMBER(5) DEFAULT(5) NOT NULL,
  max_stock    NUMBER(5) DEFAULT(15) NOT NULL,
  CONSTRAINT pk_references PRIMARY KEY(barcode), 
  CONSTRAINT uk_references UNIQUE (product,barcode), 
  CONSTRAINT fk_references_products FOREIGN KEY(product) 
             REFERENCES Products ON DELETE CASCADE,
  CONSTRAINT D_format CHECK (format IN ('C','G','P','R','B','F'))
);


CREATE TABLE Providers (
  taxID     CHAR(10),
  name      VARCHAR2(35) NOT NULL,
  person    VARCHAR2(90) NOT NULL,
  email     VARCHAR2(60) NOT NULL,
  mobile    NUMBER(9) NOT NULL,
  bankAcc   VARCHAR2(30),
  address   VARCHAR2(120) NOT NULL,
  country   VARCHAR2(45) NOT NULL,
  CONSTRAINT pk_providers PRIMARY KEY(taxID) 
);


CREATE TABLE Supply_Lines (
  taxID     CHAR(10),
  barCode   CHAR(15),
  cost      NUMBER(10,2) NOT NULL,
  CONSTRAINT pk_supply PRIMARY KEY(taxID,barcode), 
  CONSTRAINT fk_supply_references FOREIGN KEY(barcode) 
             REFERENCES References ON DELETE CASCADE,
  CONSTRAINT fk_supply_providers FOREIGN KEY(taxID) 
             REFERENCES providers ON DELETE CASCADE
);


CREATE TABLE Replacements (
  taxID     CHAR(10),
  barCode   CHAR(15),
  orderdate DATE,
  status    CHAR(1) DEFAULT ('D') NOT NULL,
  units     NUMBER(5) NOT NULL,
  deldate   DATE,
  payment   NUMBER(12,2) NOT NULL,
  CONSTRAINT pk_replacements PRIMARY KEY(taxID,barcode,orderdate), 
  CONSTRAINT fk_replacements_supply FOREIGN KEY(taxID,barcode) REFERENCES Supply_Lines,
  CONSTRAINT D_status CHECK (status IN ('D','P','F'))
);


CREATE TABLE Clients (
  username      VARCHAR2(30),
  reg_datetime  DATE NOT NULL,
  user_passw    VARCHAR2(15) NOT NULL,
  name          VARCHAR2(35) NOT NULL,
  surn1         VARCHAR2(30) NOT NULL,
  surn2         VARCHAR2(30),
  email         VARCHAR2(60),
  mobile        NUMBER(9),
  preference    VARCHAR2(12) DEFAULT('EMAIL') NOT NULL,
  voucher       NUMBER(2) DEFAULT (0) NOT NULL,
  voucher_exp   DATE,
  CONSTRAINT pk_ PRIMARY KEY(username),
  CONSTRAINT ck_client CHECK (email is not null or mobile is not null) 
) ;


CREATE TABLE Posts (
  username   VARCHAR2(30),
  postdate   DATE,
  barCode    CHAR(15),
  product    VARCHAR2(50) NOT NULL,
  score      NUMBER(1) NOT NULL, 
  title      VARCHAR2(50),
  text       VARCHAR2(2000) NOT NULL, 
  likes      NUMBER(9) DEFAULT(0) NOT NULL, 
  endorsed   DATE, -- null means it isn't endorsed; else, date of last purchase	
  CONSTRAINT pk_posts PRIMARY KEY(username,postdate),
  CONSTRAINT fk_posts_clients FOREIGN KEY(username) REFERENCES Clients,
  CONSTRAINT fk_posts_references FOREIGN KEY(product,barcode) 
             REFERENCES References(product,barcode),
  CONSTRAINT D_postscore CHECK (score between 0 and 5)
) ;

CREATE TABLE AnonyPosts (
  postdate   DATE,
  barCode    CHAR(15),
  product    VARCHAR2(50) NOT NULL,
  score      NUMBER(1) NOT NULL, 
  title      VARCHAR2(50),
  text       VARCHAR2(2000) NOT NULL, 
  likes      NUMBER(9) DEFAULT(0) NOT NULL, 
  endorsed   DATE, -- null means it isn't endorsed; else, date of last purchase	
  CONSTRAINT pk_anonyposts PRIMARY KEY(postdate),
  CONSTRAINT fk_anonyposts_references FOREIGN KEY(product,barcode) 
             REFERENCES References(product,barcode), 
  CONSTRAINT D_anonyscore CHECK (score between 0 and 5)
);


CREATE TABLE Orders_Anonym (
  orderdate     DATE,
  contact       VARCHAR2(60),  -- either email or mobile if email is null
  contact2      NUMBER(9),     -- mobile (null, unless both email and mobile not null)
  dliv_datetime DATE,
  name          VARCHAR2(35) NOT NULL,
  surn1         VARCHAR2(30) NOT NULL,
  surn2         VARCHAR2(30),
  bill_waytype  CHAR(10) NOT NULL,
  bill_wayname  CHAR(30) NOT NULL,
  bill_gate     CHAR(3),
  bill_block    CHAR(1),
  bill_stairw   CHAR(2),
  bill_floor    CHAR(7),
  bill_door     CHAR(1),
  bill_ZIP      CHAR(5) NOT NULL,
  bill_town     CHAR(45) NOT NULL,
  bill_country  CHAR(45) NOT NULL,
  dliv_waytype  CHAR(10) NOT NULL,
  dliv_wayname  CHAR(30) NOT NULL,
  dliv_gate     CHAR(3),
  dliv_block    CHAR(1),
  dliv_stairw   CHAR(2),
  dliv_floor    CHAR(7),
  dliv_door     CHAR(2),
  dliv_ZIP      CHAR(5) NOT NULL,
  dliv_town     CHAR(45),
  dliv_country  CHAR(45),
  CONSTRAINT pk_anonyorders PRIMARY KEY(orderdate,contact,dliv_town,dliv_country)
);

CREATE TABLE Lines_Anonym (
  orderdate     DATE,
  contact       VARCHAR2(60),
  dliv_town     CHAR(45),
  dliv_country  CHAR(45),
  barcode       CHAR(15),
  price         NUMBER(12,2) NOT NULL,
  quantity      NUMBER(2) NOT NULL,
  pay_type      VARCHAR2(15) NOT NULL,
  pay_datetime  DATE,
  card_comp     VARCHAR2(15),
  card_num      NUMBER(20),
  card_holder   VARCHAR2(30),
  card_expir    DATE,
  CONSTRAINT pk_anonylines PRIMARY KEY(orderdate,contact,dliv_town,dliv_country,barcode),
  CONSTRAINT fk_anonylines_anonyorders FOREIGN KEY(orderdate,contact,dliv_town,dliv_country) 
             REFERENCES Orders_Anonym ON DELETE CASCADE, 
  CONSTRAINT fk_anonylines_references FOREIGN KEY(barcode) REFERENCES References,
  CONSTRAINT D_anonycards CHECK (UPPER(pay_type)!='CREDIT CARD' OR  
                                 (card_comp IS NOT NULL AND card_num IS NOT NULL AND 
                                  card_holder IS NOT NULL AND card_expir IS NOT NULL))
);


CREATE TABLE Client_Addresses (
  username VARCHAR2(30),
  waytype  VARCHAR2(10) NOT NULL,
  wayname  VARCHAR2(30) NOT NULL,
  gate     VARCHAR2(3),
  block    VARCHAR2(1),
  stairw   VARCHAR2(2),
  floor    VARCHAR2(7),
  door     VARCHAR2(2),
  ZIP      VARCHAR2(5) NOT NULL,
  town     VARCHAR2(45),
  country  VARCHAR2(45),
  CONSTRAINT pk_address PRIMARY KEY(username,town,country),
  CONSTRAINT fk_addresses_clients FOREIGN KEY(username) 
             REFERENCES Clients ON DELETE CASCADE
) ;


CREATE TABLE Client_Cards (
  cardnum      NUMBER(20),
  username      VARCHAR2(30) NOT NULL,
  card_comp     VARCHAR2(15) NOT NULL,
  card_holder   VARCHAR2(30) NOT NULL,
  card_expir    DATE NOT NULL,
  CONSTRAINT pk_cards PRIMARY KEY(cardnum),
  CONSTRAINT fk_cards_clients FOREIGN KEY(username) 
             REFERENCES Clients ON DELETE CASCADE
) ;

CREATE CLUSTER cluster_lines (username VARCHAR2(30)) TABLESPACE TAB_16k;

CREATE TABLE Orders_Clients (
  orderdate     DATE,
  username      VARCHAR2(30),
  town          VARCHAR2(45),
  country       VARCHAR2(45),
  dliv_datetime DATE,
  bill_town     VARCHAR2(45) NOT NULL,
  bill_country  VARCHAR2(45) NOT NULL,
  discount      NUMBER(2) default(0), 
  CONSTRAINT pk_clientorders PRIMARY KEY(orderdate,username,town,country),
  CONSTRAINT fk_order_address FOREIGN KEY(username,town,country) REFERENCES Client_Addresses,
  CONSTRAINT fk_order_bill FOREIGN KEY(username,bill_town,bill_country) 
                REFERENCES Client_Addresses
) CLUSTER cluster_lines(username);

CREATE TABLE Client_Lines (
  orderdate     DATE,
  username      VARCHAR2(30),
  town          VARCHAR2(45),
  country       VARCHAR2(45),
  barcode       CHAR(15),
  price         NUMBER(12,2) NOT NULL,
  quantity      VARCHAR2(2) NOT NULL,
  pay_type      VARCHAR2(15) NOT NULL,
  pay_datetime  DATE,
  cardnum       NUMBER(20),
  CONSTRAINT pk_clientlines PRIMARY KEY(orderdate,username,town,country,barcode),
  CONSTRAINT fk_clientlines_anonyorders FOREIGN KEY(orderdate,username,town,country) 
             REFERENCES Orders_Clients ON DELETE CASCADE, 
  CONSTRAINT fk_clientlines_references FOREIGN KEY(barcode) REFERENCES References,
  CONSTRAINT fk_lines_creditcard FOREIGN KEY(cardnum) REFERENCES Client_Cards,
  CONSTRAINT D_clientcards CHECK (UPPER(pay_type)!='CREDIT CARD' OR cardnum IS NOT NULL)
) CLUSTER cluster_lines(username);

select table_name from user_tables;


CREATE INDEX index_on_username_lines ON CLUSTER cluster_lines TABLESPACE TAB_2k;


-- -----------------------------------
-- - SCRIPTS DE INSERCIÓN DE DATOS -
-- -----------------------------------

INSERT INTO Varietals(name)  (SELECT DISTINCT rtrim(varietal) FROM FSDB.catalogue);
-- 66 rows created.
INSERT INTO Origins(name) (SELECT DISTINCT rtrim(origin) FROM FSDB.catalogue);
-- 33 rows created.

INSERT INTO Products (product, coffea, varietal, origin, roast, decaf)
 (SELECT DISTINCT rtrim(product), substr(coffea,1,1), rtrim(varietal), rtrim(origin), 
                  upper(substr(roasting,1,1)), upper(substr(decaf,1,1)) 
     FROM FSDB.catalogue
 );
-- 750 rows created.

INSERT INTO Products (product, coffea, varietal, origin, roast, decaf)
 (SELECT DISTINCT rtrim(product), substr(coffea,1,1), rtrim(varietal), rtrim(origin), 
                  upper(substr(roasting,1,1)), CASE substr(dcafprocess,1,1) WHEN '-' then 'N' else 'Y' end 
     FROM FSDB.trolley where rtrim(product) not in (select product from products)
 );
-- 2 rows created.
-- notice for these there will be no supply line by now


INSERT INTO References (barCode, product, format, pack_type, pack_unit, quantity, 
                        price, cur_stock, min_stock, max_stock)
 (SELECT DISTINCT barCode, trim(product), case format when 'raw bean' then 'B' else upper(substr(format,1,1)) end,
                  substr(packaging,1,instr(packaging,' ')-1), substr(packaging,instr(packaging,' ',1,2)+1),
                  to_number(substr(substr(packaging,1,instr(packaging,' ',1,2)-1),instr(packaging,' ')+1)), 
                  to_number(substr(retail_price,1,instr(retail_price,' ')-1),'9999.99'), 
                  to_number(cur_stock), to_number(min_stock), to_number(max_stock) 
     FROM FSDB.catalogue 
     WHERE rtrim(barCode) is not null
 );
-- 3240 rows created.

INSERT INTO References (barCode, product, format, pack_type, pack_unit, quantity,price)
 (SELECT DISTINCT barCode, trim(product), case prodtype when 'raw bean' then 'B' else upper(substr(prodtype,1,1)) end,
                  substr(packaging,1,instr(packaging,' ')-1), substr(packaging,instr(packaging,' ',1,2)+1),
                  to_number(substr(substr(packaging,1,instr(packaging,' ',1,2)-1),instr(packaging,' ')+1)), 
                  to_number(substr(base_price,1,instr(base_price,' ')-1),'9999.99')
     FROM FSDB.trolley 
     WHERE rtrim(barCode) is not null AND rtrim(barcode) not in (select barcode from references)
 );
-- 1 rows created.
-- notice for this one there will be no supply line by now


INSERT INTO Providers (taxID, name, person, email, mobile, bankAcc, address, country)
 (SELECT DISTINCT rtrim(prov_taxID), rtrim(supplier), rtrim(prov_person), rtrim(prov_email), to_number(prov_mobile), 
                  rtrim(prov_bankAcc), rtrim(prov_address), rtrim(prov_country)
     FROM FSDB.catalogue 
     WHERE prov_taxid is not null
 );
-- 249 rows created.
-- first problem (primary key violation; document)
-- 1 row skipped. 


INSERT INTO Supply_Lines (taxID, barCode, cost)
 (SELECT p,b,min(c) FROM
   (SELECT DISTINCT rtrim(prov_taxID) p, barCode b, to_number(substr(cost_price,1,instr(cost_price,' ')-1),'9999.99') c
       FROM FSDB.catalogue
       WHERE prov_taxid is not null AND rtrim(barCode) is not null
   ) GROUP BY p,b
 );
-- 6468 rows created.
-- 1 null row skipped. -- first problem (same row; document)
-- second problem (primary key violation; several costs for the same supplier&barcode; document)
-- 5 repeated supply_lines; heal data: kept minimum cost (implicit semantic assumption)


-- INSERT INTO Replacements (taxID, barCode, orderdate, status, units, deldate, payment)
-- no data


INSERT INTO Clients (username, reg_datetime, user_passw, name, surn1, surn2, email, mobile)
 (SELECT DISTINCT rtrim(username), to_date(reg_date||reg_time,'yyyy / mm / ddhh:mi:ss am'), rtrim(user_passw),
                  rtrim(client_name), rtrim(client_surn1), rtrim(client_surn2), rtrim(client_email), to_number(client_mobile)
     FROM FSDB.trolley
     WHERE username is not null AND client_email is not null
);
-- 688 rows created.

INSERT INTO Clients (username, reg_datetime, user_passw, name, surn1, surn2, mobile, preference)
 (SELECT DISTINCT rtrim(username), to_date(reg_date||reg_time,'yyyy / mm / ddhh:mi:ss am'), rtrim(user_passw),
                  rtrim(client_name), rtrim(client_surn1), rtrim(client_surn2), to_number(client_mobile), 'SMS'
     FROM FSDB.trolley
     WHERE username is not null AND client_email is null 
);
-- implicit assumption: when email is null, default preference is SMS
-- 80 rows created.


INSERT INTO Posts (username, postdate, barCode, product, score, title, text, likes)
 -- null means it isn't endorsed; else, date of last purchase	
 (SELECT DISTINCT rtrim(username), to_date(post_date||post_time,'yyyy / mm / ddhh:mi:ss am'), 
         rtrim(barCode), rtrim(product), to_number(score), rtrim(title), rtrim(text), to_number(likes) 
     FROM FSDB.posts
     WHERE rtrim(product) IN (SELECT distinct product FROM references)
);
-- no post is endorsed yet
-- third problem: one product (and all its references) missing; 
-- solution: skip them (27 rows skipped); document the product
-- 3429 rows created.

-- INSERT INTO AnonyPosts (postdate, barCode, product, score, title, text, likes, endorsed) 
-- no data


INSERT INTO Orders_Anonym (orderdate, contact, contact2, dliv_datetime, name, surn1, surn2, bill_waytype,
                           bill_wayname, bill_gate, bill_block, bill_stairw, bill_floor, bill_door, bill_ZIP, 
                           bill_town, bill_country, dliv_waytype, dliv_wayname, dliv_gate, dliv_block, 
                           dliv_stairw, dliv_floor, dliv_door, dliv_ZIP, dliv_town, dliv_country)
 (SELECT DISTINCT to_date(orderdate||ordertime,'yyyy / mm / ddhh:mi:ss am'), 
                  nvl(rtrim(client_email),rtrim(client_mobile)), nvl2(rtrim(client_email),rtrim(client_mobile),null),
                  to_date(dliv_date||dliv_time,'yyyy / mm / ddhh:mi:ss am'), 
                  rtrim(client_name), rtrim(client_surn1), rtrim(client_surn2), 
                  rtrim(bill_waytype), rtrim(bill_wayname), rtrim(bill_gate), rtrim(bill_block), rtrim(bill_stairw), 
                  rtrim(bill_floor), rtrim(bill_door), rtrim(bill_ZIP), rtrim(bill_town), rtrim(bill_country),
                  rtrim(dliv_waytype), rtrim(dliv_wayname), rtrim(dliv_gate), rtrim(dliv_block), rtrim(dliv_stairw), 
                  rtrim(dliv_floor), rtrim(dliv_door), rtrim(dliv_ZIP), rtrim(dliv_town), rtrim(dliv_country)
 FROM FSDB.trolley
 WHERE rtrim(username) IS NULL
);
-- either email or mobile if email is null
-- mobile (null, unless both email and mobile )
-- 3207 rows created.


INSERT INTO Lines_Anonym (orderdate, contact, dliv_town, dliv_country, barcode, price, quantity, 
                           pay_type, pay_datetime, card_comp, card_num, card_holder, card_expir)
 (SELECT DISTINCT to_date(orderdate||ordertime,'yyyy / mm / ddhh:mi:ss am'), 
                  nvl(rtrim(client_email),rtrim(client_mobile)), rtrim(dliv_town), rtrim(dliv_country), rtrim(barcode), 
                  to_number(substr(base_price,1,instr(base_price,' ')-1),'9999.99'), to_number(quantity),
                  rtrim(payment_type), to_date(payment_date||payment_time,'yyyy / mm / ddhh:mi:ss am'),
                  rtrim(card_company), to_number(card_number), rtrim(card_holder), to_date(card_expiratn,'mm/yy')
     FROM FSDB.trolley
     WHERE rtrim(username) IS NULL
);
-- 3537 rows created.


INSERT INTO Client_Addresses (username, waytype, wayname, gate, block, stairw, floor, door, ZIP, town, country)
 (SELECT DISTINCT rtrim(username), rtrim(bill_waytype), rtrim(bill_wayname), rtrim(bill_gate), 
                  rtrim(bill_block), rtrim(bill_stairw), rtrim(bill_floor), rtrim(bill_door), 
                  rtrim(bill_ZIP), rtrim(bill_town), rtrim(bill_country)
     FROM FSDB.trolley 
     WHERE rtrim(username) is not null
);
-- 768 rows created.

INSERT INTO Client_Addresses (username, waytype, wayname, gate, block, stairw, floor, door, ZIP, town, country)
 (SELECT DISTINCT rtrim(username), rtrim(dliv_waytype), rtrim(dliv_wayname), rtrim(dliv_gate), 
                  rtrim(dliv_block), rtrim(dliv_stairw), rtrim(dliv_floor), rtrim(dliv_door), 
                  rtrim(dliv_ZIP), rtrim(dliv_town), rtrim(dliv_country)
     FROM FSDB.trolley 
     WHERE rtrim(username) is not null AND 
           (rtrim(username),rtrim(dliv_town), rtrim(dliv_country)) NOT IN (SELECT username,town,country from Client_Addresses)
);
-- 1222 rows created.


INSERT INTO Client_Cards (cardnum, username, card_comp, card_holder, card_expir)
 (SELECT DISTINCT to_number(card_number), rtrim(username), rtrim(card_company), rtrim(card_holder), 
                  to_date(card_expiratn,'mm/yy')
 FROM FSDB.trolley
    WHERE rtrim(username) is not null AND to_number(card_number) IS NOT NULL
);
-- 472 rows created.


INSERT INTO Orders_Clients (orderdate, username, town, country, dliv_datetime, bill_town, bill_country) 
 (SELECT DISTINCT to_date(orderdate||ordertime,'yyyy / mm / ddhh:mi:ss am'), 
                  rtrim(username), rtrim(dliv_town), rtrim(dliv_country), 
                  to_date(dliv_date||dliv_time,'yyyy / mm / ddhh:mi:ss am'), 
                  rtrim(bill_town), rtrim(bill_country)
    FROM FSDB.trolley
    WHERE rtrim(username) IS NOT NULL
);
-- 50140 rows created.

INSERT INTO Client_Lines (orderdate, username, town, country, barcode, cardnum, price, quantity, pay_type, pay_datetime)
 (SELECT DISTINCT to_date(orderdate||ordertime,'yyyy / mm / ddhh:mi:ss am'), 
                  rtrim(username), rtrim(dliv_town), rtrim(dliv_country), barcode, to_number(card_number), 
                  to_number(substr(base_price,1,instr(base_price,' ')-1),'9999.99'), to_number(quantity),
                  rtrim(payment_type), to_date(payment_date||payment_time,'yyyy / mm / ddhh:mi:ss am')
    FROM FSDB.trolley
    WHERE rtrim(username) IS NOT NULL
);
-- 55206 rows created.

COMMIT;
/

CREATE INDEX index_on_barcode_posts ON Posts(barcode) TABLESPACE TAB_2k;
CREATE INDEX index_on_product_posts ON Posts(product) TABLESPACE TAB_2k;
--CREATE INDEX index_on_score_posts ON Posts(score) TABLESPACE TAB_2k;

-- ----------------------------------------------------
-- ----------------------------------------------------
-- -- TESTS & STATISTICS SCRIPT -----------------------
-- ----------------------------------------------------
-- -- Course: File Structures and DataBases -----------
-- ----------------------------------------------------
-- -- (c) 2024 Javier Calle ---------------------------
-- ------ Carlos III University of Madrid -------------
-- ----------------------------------------------------
-- ----------------------------------------------------
-- -- Part I: Package Definition ----------------------
-- ----------------------------------------------------

CREATE OR REPLACE PACKAGE PKG_COSTES AS

-- WORKLOAD definition
	PROCEDURE PR_WORKLOAD(N NUMBER);
-- Execution of workload (10 times) displaying some measurements 
	PROCEDURE RUN_TEST(ite NUMBER);

END PKG_COSTES;
/

-- ----------------------------------------------------
-- -- Part II: Package BODY ---------------------------
-- ----------------------------------------------------

CREATE OR REPLACE PACKAGE BODY PKG_COSTES AS

-- auxiliary function converting an interval into a number (milliseconds)
FUNCTION interval_to_milliseconds(x INTERVAL DAY TO SECOND ) RETURN NUMBER IS
  BEGIN
    return (((extract( day from x)*24 + extract( hour from x))*60 + extract( minute from x))*60 + extract( second from x))*1000;
  END interval_to_milliseconds;


PROCEDURE PR_WORKLOAD(N NUMBER) IS
-- this year, the WL does not need to distinguish iterations, so N is not taken into account
-- notice that the fourth query appears twice (double the frequency) and the fifth appears four times
-- so each step represents 10% frequency, and no query is repeated immediately
BEGIN

-- STEP 1 - QUERY 1
FOR fila in (
select /*+ INDEX(Posts index_on_barcode_posts) */ * from posts where barcode='OII04455O419282'
) LOOP null; END LOOP;

-- STEP 2 - QUERY 5
FOR fila in (
select (quantity*price) as total, bill_town||'/'||bill_country as place 
   	from orders_clients join client_lines using (orderdate,username,town,country) 
 	where username='chamorro'
) LOOP null; END LOOP;

-- STEP 3 - QUERY 2
FOR fila in (
select /*+ INDEX(Posts index_on_product_posts) */ * from posts where product='Compromiso'
) LOOP null; END LOOP;

-- STEP 4 - QUERY 5
FOR fila in (
select (quantity*price) as total, bill_town||'/'||bill_country as place 
   	from orders_clients join client_lines using (orderdate,username,town,country) 
 	where username='chamorro'
) LOOP null; END LOOP;

-- STEP 5 - QUERY 3
FOR fila in (
select  /*+ INDEX(Posts index_on_score_posts) */ * from posts where score>=4
) LOOP null; END LOOP;

-- STEP 6 - QUERY 5
FOR fila in (
select (quantity*price) as total, bill_town||'/'||bill_country as place 
   	from orders_clients join client_lines using (orderdate,username,town,country) 
 	where username='chamorro'
) LOOP null; END LOOP;

-- STEP 7 - QUERY 4
FOR fila in (
select * from posts
) LOOP null; END LOOP;

-- STEP 8 - QUERY 5
FOR fila in (
select (quantity*price) as total, bill_town||'/'||bill_country as place 
   	from orders_clients join client_lines using (orderdate,username,town,country) 
 	where username='chamorro'
) LOOP null; END LOOP;

-- STEP 9 - QUERY 4
FOR fila in (
select * from posts
) LOOP null; END LOOP;

-- STEP 10 - QUERY 5
FOR fila in (
select (quantity*price) as total, bill_town||'/'||bill_country as place 
   	from orders_clients join client_lines using (orderdate,username,town,country) 
 	where username='chamorro'
) LOOP null; END LOOP;

END PR_WORKLOAD;


PROCEDURE RUN_TEST(ite NUMBER) IS
   t1 TIMESTAMP;
   t2 TIMESTAMP;
   auxt NUMBER := 0;
   g1 NUMBER;
   g2 NUMBER;
   auxg NUMBER := 0;
   localsid NUMBER;
BEGIN
      PKG_COSTES.PR_WORKLOAD(0);  -- idle run for preparing db_buffers
      select distinct sid into localsid from v$mystat;
--- LOOP WORKLOAD ITERATIONS (ite times) --------------------------------
      FOR i IN 1..ite LOOP
        DBMS_OUTPUT.PUT_LINE('Iteration '||i);
--- GET PREVIOUS MEASURES -----------------------------------
        SELECT SYSTIMESTAMP INTO t1 FROM DUAL;
        select S.value into g1
           from (select * from v$sesstat where sid=localsid) S
                join (select * from v$statname where name='consistent gets') using(STATISTIC#);
--- EXECUTION OF THE WORKLOAD -----------------------------------
        PKG_COSTES.PR_WORKLOAD (i);
--- GET AFTER-RUN MEASURES -----------------------------------
        SELECT SYSTIMESTAMP INTO t2 FROM DUAL;
        select S.value into g2
           from (select * from v$sesstat where sid=localsid) S
                join (select * from v$statname where name='consistent gets') using(STATISTIC#);
--- ACCUMULATE MEASURES -----------------------------------
        auxt:= auxt + interval_to_milliseconds(t2-t1);
        auxg:= auxg + g2-g1;
--- END TESTS ---------------------------------------------------
      END LOOP;
      auxt:= auxt / ite;
      auxg:= auxg / ite;
--- DISPLAY RESULTS -----------------------------------
    DBMS_OUTPUT.PUT_LINE('RESULTS AT '||to_char(sysdate,'dd/mm/yyyy hh24:mi:ss'));
    DBMS_OUTPUT.PUT_LINE('TIME CONSUMPTION (run): '|| auxt ||' milliseconds.');
    DBMS_OUTPUT.PUT_LINE('CONSISTENT GETS (workload):'|| auxg ||' acc');
    DBMS_OUTPUT.PUT_LINE('CONSISTENT GETS (weighted average):'|| auxg/10 ||' acc');
END RUN_TEST;


BEGIN
-- alter system flush buffer_cache;
   DBMS_OUTPUT.ENABLE (buffer_size => NULL);

END PKG_COSTES;
/

--EMPEZAMOS A CREAR INDICES
--CREATE INDEX index_on_barcode_posts ON Posts(barcode) TABLESPACE TAB_2k;
--CREATE INDEX index_on_product_posts ON Posts(product) TABLESPACE TAB_2k;
--TIME CONSUMPTION (run): 32,2 milliseconds.
--CONSISTENT GETS (workload):6150 acc
--CONSISTENT GETS (weighted average):615 acc
--CREATE INDEX index_on_score_posts ON Posts(score) TABLESPACE TAB_2k;
--TIME CONSUMPTION (run): 36 milliseconds.
--CONSISTENT GETS (workload):6337 acc
--CONSISTENT GETS (weighted average):633,7 acc

--TIME CONSUMPTION (run): 34,4 milliseconds.
--CONSISTENT GETS (workload):6328 acc
--CONSISTENT GETS (weighted average):632,8 acc

--Now we create the indexed cluster
--CREATE INDEX index_on_username_lines ON CLUSTER cluster_lines TABLESPACE TAB_8k;

exec PKG_COSTES.RUN_TEST(20);

--RESULTS AT 30/04/2024 15:55:34           
--  TIME CONSUMPTION (run): 24,4 milliseconds.                                 
--  CONSISTENT GETS (workload):3372 acc                                         
--  CONSISTENT GETS (weighted average):337,2 acc
  
  /*RESULTS AT 30/04/2024 17:00:50                                               
  TIME CONSUMPTION (run): 19,55 milliseconds.                                  
  CONSISTENT GETS (workload):1640 acc                                          
  CONSISTENT GETS (weighted average):164 acc                                                                                                                
  Procedimiento PL/SQL terminado correctamente. */
